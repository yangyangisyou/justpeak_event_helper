{"version":3,"sources":["controller/request.ts","components/Landing.tsx","components/hooks/useParticipants.tsx","components/List.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["host","process","request","getParticipants","PassCode","a","axios","post","result","data","console","log","response","message","upDatePaid","eventData","participants","event","Landing","setEventData","setLogged","logged","useState","passcode","setPassCode","hostName","setHostName","className","placeholder","value","onChange","target","onClick","evt","Code","HostName","passCode","useParticipants","initialVal","setParticipants","setPaid","index","temp","paid","Participant","key","participantId","participantName","eventId","isAdmin","eventName","type","checked","List","ref","eventDate","participantNumber","confirmSubmit","setConfirmSubmit","success","setSuccess","confirmRef","useRef","useEffect","document","addEventListener","current","contains","expected_money","length","admins","filter","participant","i","collected","ParticipantsList","map","uuid","Wrapper","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.b8a5dcbb.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios';\r\nimport {IEvent, IParticipant, IPassCode} from '../models/models';\r\n\r\nconst host = process.env.REACT_APP_APIHOST;\r\ntype EventInfo = IEvent;\r\nexport const request = {\r\n  getParticipants: async function (PassCode: IPassCode): Promise<EventInfo> {\r\n    try {\r\n      const result: AxiosResponse<any> = await axios.post(\r\n        `${host}/login`,\r\n        PassCode\r\n      );\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error.response);\r\n      return error.message;\r\n    }\r\n  },\r\n  upDatePaid: async function (\r\n    eventData: IEvent,\r\n    participants: Array<IParticipant>\r\n  ) {\r\n    const event = eventData;\r\n    event.participants = participants;\r\n    try {\r\n      const result: AxiosResponse<any> = await axios.post(\r\n        `${host}/updateParticipants`,\r\n        event\r\n      );\r\n      console.log(result);\r\n      return event;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  },\r\n};\r\n","import {Dispatch, SetStateAction, useState} from 'react';\r\nimport {request} from '../controller/request';\r\nimport {IEvent} from '../models/models';\r\ninterface ILandingProp {\r\n  logged: boolean;\r\n  setEventData: Dispatch<SetStateAction<IEvent>>;\r\n  setLogged: Dispatch<SetStateAction<boolean>>;\r\n}\r\nfunction Landing({setEventData, setLogged, logged}: ILandingProp) {\r\n  const [passcode, setPassCode] = useState('');\r\n  const [hostName, setHostName] = useState('');\r\n  return (\r\n    <div className='Landing'>\r\n      <div className='Landing__form'>\r\n        <h1>口說團 活動助手 v1</h1>\r\n        <div>\r\n          <label>Name:</label>\r\n          <input\r\n            placeholder='Enter Name here'\r\n            value={hostName}\r\n            onChange={(event) => {\r\n              setHostName(event.target.value);\r\n            }}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <label>Passcode:</label>\r\n          <input\r\n            placeholder='Enter Code Here'\r\n            value={passcode}\r\n            onChange={(event) => {\r\n              setPassCode(event.target.value);\r\n            }}\r\n          ></input>\r\n        </div>\r\n\r\n        <button\r\n          onClick={async (evt) => {\r\n            const result = await request.getParticipants({\r\n              Code: passcode,\r\n              HostName: hostName,\r\n            });\r\n            //see if passcode is correct\r\n            if (result.passCode == passcode) {\r\n              setEventData(result);\r\n              setLogged(!logged);\r\n            }\r\n          }}\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","import {useState} from 'react';\r\nimport {IParticipant} from '../../models/models';\r\n\r\nfunction useParticipants(initialVal: Array<IParticipant>) {\r\n  const [participants, setParticipants] = useState(initialVal);\r\n  function setPaid(index: number): void {\r\n    let temp = [...participants];\r\n\r\n    temp[index].paid = !temp[index].paid;\r\n    console.log(temp[index].paid);\r\n    setParticipants(temp);\r\n    // console.log(temp);\r\n  }\r\n  return {participants, setPaid};\r\n}\r\nexport default useParticipants;\r\n","import {Dispatch, SetStateAction, useState, useRef, useEffect} from 'react';\r\nimport useParticipants from './hooks/useParticipants';\r\nimport * as uuid from 'uuid';\r\nimport {IEvent, IParticipant} from '../models/models';\r\nimport {request} from '../controller/request';\r\n\r\ninterface participant extends IParticipant {\r\n  key: string;\r\n  setPaid: (index: number) => void;\r\n  index: number;\r\n}\r\n\r\ninterface IListProps {\r\n  eventData: IEvent;\r\n  setLogged: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nfunction Participant({\r\n  key,\r\n  participantId,\r\n  participantName,\r\n  eventId,\r\n  isAdmin,\r\n  index,\r\n  paid,\r\n  eventName,\r\n  setPaid,\r\n}: participant) {\r\n  return (\r\n    <div className={`List__member ${index % 2 === 0 ? 'darkgrey' : 'grey'}`}>\r\n      <h2>{participantName}</h2>\r\n      {paid ? (\r\n        <div>\r\n          <input\r\n            type='checkbox'\r\n            checked\r\n            onChange={() => {\r\n              setPaid(index);\r\n            }}\r\n          ></input>\r\n          <label>Paid</label>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <input\r\n            type='checkbox'\r\n            onChange={() => {\r\n              setPaid(index);\r\n            }}\r\n          ></input>\r\n          <label>Unpaid</label>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction List({eventData, setLogged}: IListProps) {\r\n  const {\r\n    eventId,\r\n    eventName,\r\n    hostName,\r\n    passCode,\r\n    eventDate,\r\n    participantNumber,\r\n  } = eventData;\r\n  const {participants, setPaid} = useParticipants(\r\n    eventData.participants as Array<IParticipant>\r\n  );\r\n  const [confirmSubmit, setConfirmSubmit] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const confirmRef = useRef(null);\r\n  //Reference if Button\r\n  function Confirm(ref: any) {\r\n    useEffect(() => {\r\n      document.addEventListener('click', (evt: any) => {\r\n        if (ref.current && !ref.current.contains(evt.target)) {\r\n          setConfirmSubmit(false);\r\n        }\r\n      });\r\n    }, [ref]);\r\n  }\r\n  Confirm(confirmRef);\r\n  //calculate expected_money find how many Admins and Show Collected money\r\n  const expected_money = participants.length * 200;\r\n  const admins = participants.filter((participant: IParticipant, i: number) => {\r\n    return participant.isAdmin === true;\r\n  });\r\n  let collected = participants.filter(\r\n    (participant: IParticipant, i: number) => {\r\n      return participant.paid === true;\r\n    }\r\n  );\r\n  //Mapping Participants\r\n  const ParticipantsList = participants.map((data, index) => {\r\n    return (\r\n      <Participant\r\n        eventName={data.eventName}\r\n        participantId={data.participantId}\r\n        eventId={data.eventId}\r\n        setPaid={setPaid}\r\n        participantName={data.participantName}\r\n        index={index}\r\n        paid={data.paid}\r\n        key={uuid.v4()}\r\n        isAdmin={data.isAdmin}\r\n      />\r\n    );\r\n  });\r\n  return (\r\n    <div className='List'>\r\n      {success ? (\r\n        <div\r\n          className='List__success'\r\n          onClick={() => {\r\n            setLogged(false);\r\n            setSuccess(false);\r\n          }}\r\n        >\r\n          <div>Successfully Submitted!</div>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n      <h1>Welcome {hostName} !</h1>\r\n\r\n      <div className='List__container'>\r\n        <div className='List__info'>\r\n          <p>Participants : {participants.length}</p>\r\n          <p>Admins : {admins.length}</p>\r\n        </div>\r\n        <div className='List__List'>{ParticipantsList}</div>\r\n\r\n        <div className='List__money'>\r\n          <div className='left'>\r\n            <p>Shall Recieve:</p>\r\n            <p>${expected_money}</p>\r\n          </div>\r\n          <div className='right'>\r\n            <p>Collected :</p>\r\n            <p>${collected.length * 200}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='List__buttons' ref={confirmRef}>\r\n        {/* <button className='text'>Generate text</button> */}\r\n        <button\r\n          className={confirmSubmit ? 'confirm' : 'submit'}\r\n          onClick={(evt) => {\r\n            // console.log(evt.target);\r\n            setConfirmSubmit(true);\r\n\r\n            if (confirmSubmit == true) {\r\n              const result = request.upDatePaid(eventData, participants);\r\n              if (result) {\r\n                setSuccess(true);\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          {confirmSubmit ? 'Confirm' : 'Submit'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import {Component, useState} from 'react';\nimport './App.css';\nimport Landing from './components/Landing';\nimport List from './components/List';\nimport {IEvent} from './models/models';\n// import dotenv from 'dotenv';\n// dotenv.config();\nexport class Wrapper extends Component {\n  render() {\n    return <App />;\n  }\n}\nfunction App() {\n  console.log(process.env);\n\n  const eventIni: IEvent = {\n    eventId: 0,\n    eventName: '',\n    hostName: '',\n    passCode: '',\n    eventDate: '',\n    participantNumber: 0,\n    participants: [],\n  };\n  const [eventData, setEventData] = useState<IEvent>(eventIni);\n  const [logged, setLogged] = useState(false);\n  return (\n    <div className='App'>\n      {logged === true ? (\n        <List eventData={eventData} setLogged={setLogged} />\n      ) : (\n        <Landing\n          setEventData={setEventData}\n          setLogged={setLogged}\n          logged={logged}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App, {Wrapper} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}