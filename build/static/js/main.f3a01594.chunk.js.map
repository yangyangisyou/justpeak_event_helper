{"version":3,"sources":["models/models.ts","controller/contexts/statusContext.tsx","controller/contexts/hostContext.tsx","controller/request.ts","components/Landing.tsx","components/hooks/useParticipants.tsx","components/HostView.tsx","components/AdminView.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["login_status","page_status","StatusContext","React","createContext","StatusProvider","children","useState","default","currentStatus","setCurrentStatus","userName","setUserName","Provider","value","status","setNewStatus","HostContext","HostProvider","HostName","Code","hostInfo","setHostInfo","host","process","REACT_APP_PRODHOST","request","getParticipants","PassCode","a","axios","get","result","console","log","response","message","upDatePaid","eventData","participants","event","post","adminLogin","AdminInfo","adminGetAllEvent","Landing","useContext","passcode","setPassCode","hostName","setHostName","adminWarning","setAdminWarning","className","onClick","admin","placeholder","onChange","target","to","AdminName","Password","useParticipants","initialVal","setParticipants","setPaid","index","temp","paid","Participant","participantId","participantName","eventId","isAdmin","eventName","type","checked","HostView","history","useHistory","EventData","setEventData","pageStatus","SetPageStatus","confirmSubmit","setConfirmSubmit","success","setSuccess","useParams","useEffect","data","wrong","getEvent","expected_money","passCode","eventDate","participantNumber","length","admins","filter","participant","i","collected","ParticipantsList","map","uuid","evt","push","stopPropagation","now","Date","getMonth","getDate","getHours","alert","Event","week","AdminView","eventList","setEventList","getEventList","eventListView","sort","b","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3a01594.chunk.js","sourcesContent":["export interface IEvent {\r\n  eventId: number;\r\n  eventName: string;\r\n  hostName: string;\r\n  passCode: string;\r\n  eventDate: string;\r\n  participantNumber: number;\r\n  week: number;\r\n  participants?: Array<IParticipant>;\r\n}\r\nexport interface IParticipant {\r\n  participantId: number;\r\n  paid: boolean;\r\n  eventName: string;\r\n  isAdmin: boolean;\r\n  participantName: string;\r\n  eventId: number;\r\n}\r\n\r\nexport interface IPassCode {\r\n  Code: string;\r\n  HostName: string;\r\n}\r\n\r\nexport enum login_status {\r\n  admin = 'admin',\r\n  host = 'host',\r\n  default = '',\r\n}\r\n\r\nexport enum page_status {\r\n  success = 'success',\r\n  wrong = 'wrong',\r\n  wait = 'wait',\r\n  default = '',\r\n}\r\n\r\nexport interface IAdminInfo {\r\n  AdminName: string;\r\n  Password: string;\r\n}\r\n\r\nexport interface IEventDay {\r\n  month?: number;\r\n  day?: number;\r\n}\r\n","import React, {useState} from 'react';\r\nimport {login_status} from '../../models/models';\r\ninterface IStatusContext {\r\n  status: login_status;\r\n  setNewStatus: (value: login_status) => void;\r\n  userName: string;\r\n  setUserName: (value: string) => void;\r\n}\r\ninterface IStatusContextProp {\r\n  children: React.ReactNode;\r\n}\r\nexport const StatusContext = React.createContext({} as IStatusContext);\r\nexport function StatusProvider({children}: IStatusContextProp) {\r\n  const [currentStatus, setCurrentStatus] = useState(login_status.default);\r\n  const [userName, setUserName] = useState('');\r\n  function setNewStatus(status: login_status) {\r\n    setCurrentStatus(status);\r\n  }\r\n  return (\r\n    <StatusContext.Provider\r\n      value={{\r\n        status: currentStatus,\r\n        userName: userName,\r\n        setNewStatus: setNewStatus,\r\n        setUserName: setUserName,\r\n      }}\r\n    >\r\n      {children}\r\n    </StatusContext.Provider>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {IPassCode} from '../../models/models';\r\ninterface IHostContext {\r\n  hostInfo: IPassCode;\r\n  setHostInfo?: (newHostInfo: IPassCode) => void;\r\n}\r\ninterface IHostContextProp {\r\n  children: React.ReactNode;\r\n}\r\nexport const HostContext = React.createContext({} as IHostContext);\r\n\r\nexport function HostProvider({children}: IHostContextProp) {\r\n  const [hostInfo, setHostInfo] = useState<IPassCode>({HostName: '', Code: ''});\r\n  function setNewHost(newHostInfo: IPassCode) {\r\n    setHostInfo(newHostInfo);\r\n  }\r\n  return (\r\n    <HostContext.Provider\r\n      value={{hostInfo: hostInfo, setHostInfo: setHostInfo}}\r\n    >\r\n      {children}\r\n    </HostContext.Provider>\r\n  );\r\n}\r\n","import axios, {AxiosResponse} from 'axios';\r\nimport {IAdminInfo, IEvent, IParticipant, IPassCode} from '../models/models';\r\n\r\nconst host =\r\n  process.env.REACT_APP_MODE == 'DEV'\r\n    ? process.env.REACT_APP_DEVHOST\r\n    : process.env.REACT_APP_PRODHOST;\r\ntype EventInfo = IEvent;\r\nexport const request = {\r\n  getParticipants: async function (\r\n    PassCode: IPassCode\r\n  ): Promise<AxiosResponse<any>> {\r\n    const {Code, HostName} = PassCode;\r\n    try {\r\n      const result: AxiosResponse<any> = await axios.get(\r\n        `${host}/login?PassCode=${Code}&HostName=${HostName}`\r\n      );\r\n      return result;\r\n    } catch (error) {\r\n      console.log(error.response);\r\n      return error.message;\r\n    }\r\n  },\r\n  upDatePaid: async function (\r\n    eventData: IEvent,\r\n    participants: Array<IParticipant>\r\n  ) {\r\n    const event = eventData;\r\n    event.participants = participants;\r\n    try {\r\n      const result: AxiosResponse<any> = await axios.post(\r\n        `${host}/updateParticipants`,\r\n        event\r\n      );\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  },\r\n  adminLogin: async function (AdminInfo: IAdminInfo) {\r\n    try {\r\n      const result: AxiosResponse<any> = await axios.post(\r\n        `${host}/admin/login`,\r\n        AdminInfo\r\n      );\r\n      return result;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  },\r\n  adminGetAllEvent: async function (): Promise<AxiosResponse<any>> {\r\n    try {\r\n      const result: AxiosResponse<any> = await axios.get(\r\n        `${host}/admin/events`\r\n      );\r\n      return result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return error;\r\n    }\r\n  },\r\n};\r\n","import {Dispatch, SetStateAction, useState, useContext, useEffect} from 'react';\r\nimport {StatusContext} from '../controller/contexts/statusContext';\r\nimport {HostContext} from '../controller/contexts/hostContext';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport {request} from '../controller/request';\r\nimport {IEvent, login_status} from '../models/models';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Landing() {\r\n  const {status, userName, setUserName, setNewStatus} = useContext(\r\n    StatusContext\r\n  );\r\n  const {hostInfo, setHostInfo} = useContext(HostContext);\r\n  // console.log(status);\r\n  const [passcode, setPassCode] = useState('');\r\n  const [hostName, setHostName] = useState('');\r\n  const [adminWarning, setAdminWarning] = useState(false);\r\n  //parse XFBML to the page\r\n  // useEffect(() => {\r\n  //   FB.XFBML.parse();\r\n  // }, []);\r\n  // function getLogin() {\r\n  //   FB.getLoginStatus((res) => {\r\n  //     console.log(res);\r\n  //   });\r\n  // }\r\n  return (\r\n    <div className='Landing'>\r\n      {adminWarning ? (\r\n        <span\r\n          className='Landing__Warning'\r\n          onClick={() => {\r\n            setAdminWarning(false);\r\n          }}\r\n        >\r\n          請確認您是否是管理員 <br />\r\n          如果不是的話請續點左下角回至host登入頁面\r\n          <br />\r\n          <br />\r\n          點擊我消失\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n      <button\r\n        className='Landing__Admin'\r\n        onClick={() => {\r\n          if (status == login_status.default) {\r\n            setAdminWarning(true);\r\n            setNewStatus(login_status.admin);\r\n          } else {\r\n            setNewStatus(login_status.default);\r\n          }\r\n        }}\r\n      >\r\n        Admin\r\n      </button>\r\n      <div className='Landing__form'>\r\n        <h1>\r\n          {status == login_status.admin\r\n            ? '口說團 管理員助手 v1'\r\n            : '口說團 活動助手 v1'}\r\n        </h1>\r\n        <div>\r\n          <label>Name:</label>\r\n          <input\r\n            placeholder='Enter Name here'\r\n            value={hostName}\r\n            onChange={(event) => {\r\n              setHostName(event.target.value);\r\n            }}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <label>\r\n            {status == login_status.admin ? 'Password' : 'PassCode'}\r\n          </label>\r\n          <input\r\n            placeholder='Enter Code Here'\r\n            value={passcode}\r\n            onChange={(event) => {\r\n              setPassCode(event.target.value);\r\n            }}\r\n          ></input>\r\n        </div>\r\n\r\n        {status == login_status.default || status == login_status.host ? (\r\n          <Link to={`/host/${hostName}/${passcode}`}>\r\n            <button\r\n              className='submit'\r\n              onClick={() => {\r\n                if (setNewStatus && setHostInfo) {\r\n                  setNewStatus(login_status.host);\r\n                  setUserName(hostName);\r\n                  setHostInfo({HostName: hostName, Code: passcode});\r\n                }\r\n              }}\r\n            >\r\n              Submit\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <Link to='/admin'>\r\n            <button\r\n              className='submit'\r\n              onClick={async () => {\r\n                const result = await request.adminLogin({\r\n                  AdminName: hostName,\r\n                  Password: passcode,\r\n                });\r\n                if (result?.status !== 200) {\r\n                  setNewStatus(login_status.default);\r\n                } else {\r\n                  setUserName(hostName);\r\n                }\r\n              }}\r\n            >\r\n              Submit\r\n            </button>\r\n          </Link>\r\n        )}\r\n        {/* <FacebookLogin\r\n          appId='2218447721622502'\r\n          icon='fa-facebook'\r\n          autoLoad={true}\r\n          fields='name,email,picture'\r\n          callback={() => {\r\n            getLogin();\r\n          }}\r\n        /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","import {useState} from 'react';\r\nimport {IParticipant} from '../../models/models';\r\n\r\nfunction useParticipants(initialVal: Array<IParticipant>) {\r\n  const [participants, setParticipants] = useState(initialVal);\r\n  function setPaid(index: number): void {\r\n    let temp = [...participants];\r\n\r\n    temp[index].paid = !temp[index].paid;\r\n    console.log(temp[index].paid);\r\n    setParticipants(temp);\r\n    // console.log(temp);\r\n  }\r\n  return {participants, setPaid, setParticipants};\r\n}\r\nexport default useParticipants;\r\n","import {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  useContext,\r\n} from 'react';\r\nimport useParticipants from './hooks/useParticipants';\r\nimport * as uuid from 'uuid';\r\nimport {\r\n  IEvent,\r\n  IEventDay,\r\n  IParticipant,\r\n  login_status,\r\n  page_status,\r\n} from '../models/models';\r\nimport {request} from '../controller/request';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n//context\r\nimport {HostContext} from '../controller/contexts/hostContext';\r\nimport {StatusContext} from '../controller/contexts/statusContext';\r\n\r\ninterface participant extends IParticipant {\r\n  setPaid: (index: number) => void;\r\n  index: number;\r\n}\r\ninterface IParamtypes {\r\n  HostName: string;\r\n  PassCode: string;\r\n}\r\n//--------------------------Primary Component---------------------\r\nfunction HostView() {\r\n  //Set contexts\r\n  const {status, setNewStatus} = useContext(StatusContext);\r\n  // const host = useContext(HostContext);\r\n  const history = useHistory();\r\n  //States\r\n  const [EventData, setEventData] = useState<IEvent>({} as IEvent);\r\n  const {participants, setPaid, setParticipants} = useParticipants(\r\n    (EventData?.participants as Array<IParticipant>) || []\r\n  );\r\n  const [pageStatus, SetPageStatus] = useState(page_status.default);\r\n\r\n  const [confirmSubmit, setConfirmSubmit] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  //Params from react router\r\n  let {HostName, PassCode} = useParams<IParamtypes>();\r\n  useEffect(() => {\r\n    async function getEvent() {\r\n      const hostInfo = {HostName: HostName, Code: PassCode};\r\n      const result = await request.getParticipants(hostInfo);\r\n      if (result.status === 200) {\r\n        const data = result.data;\r\n        SetPageStatus(page_status.success);\r\n        setEventData(data);\r\n      } else {\r\n        SetPageStatus(page_status.wrong);\r\n      }\r\n    }\r\n    getEvent();\r\n  }, []);\r\n  useEffect(() => {\r\n    if (EventData?.participants) {\r\n      setParticipants(EventData.participants);\r\n    }\r\n  }, [EventData]);\r\n  const {eventId, eventName, hostName, passCode, eventDate, participantNumber} =\r\n    EventData || {};\r\n\r\n  // const confirmRef = useRef(null);\r\n\r\n  const expected_money = participants.length * 200;\r\n\r\n  const admins = participants.filter((participant: IParticipant, i: number) => {\r\n    return participant.isAdmin === true;\r\n  });\r\n  let collected = participants.filter(\r\n    (participant: IParticipant, i: number) => {\r\n      return participant.paid === true;\r\n    }\r\n  );\r\n  //Mapping Participants\r\n  const ParticipantsList = participants.map((data, index) => {\r\n    return (\r\n      <Participant\r\n        eventName={data.eventName}\r\n        participantId={data.participantId}\r\n        eventId={data.eventId}\r\n        setPaid={setPaid}\r\n        participantName={data.participantName}\r\n        index={index}\r\n        paid={data.paid}\r\n        key={uuid.v4()}\r\n        isAdmin={data.isAdmin}\r\n      />\r\n    );\r\n  });\r\n  switch (pageStatus) {\r\n    case page_status.success:\r\n      return (\r\n        <div\r\n          className='List'\r\n          onClick={(evt) => {\r\n            // console.log(evt.target);\r\n            setConfirmSubmit(false);\r\n          }}\r\n        >\r\n          {success ? (\r\n            <div\r\n              className='List__success'\r\n              onClick={() => {\r\n                if (setNewStatus) {\r\n                  setNewStatus(login_status.default);\r\n                  history.push('/');\r\n                }\r\n              }}\r\n            >\r\n              <div>Successfully Submitted!</div>\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n          <h1>Welcome {hostName} !</h1>\r\n\r\n          <div className='List__container'>\r\n            <div className='List__info'>\r\n              <p>Participants : {participants.length}</p>\r\n              <p>Admins : {admins.length}</p>\r\n            </div>\r\n            <div className='List__List'>{ParticipantsList}</div>\r\n\r\n            <div className='List__money'>\r\n              <div className='left'>\r\n                <p>Shall Recieve:</p>\r\n                <p>${expected_money}</p>\r\n              </div>\r\n              <div className='right'>\r\n                <p>Collected :</p>\r\n                <p>${collected.length * 200}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='List__buttons'>\r\n            {/* <button className='text'>Generate text</button> */}\r\n            <button\r\n              // ref={confirmRef}\r\n              className={confirmSubmit ? 'confirm' : 'submit'}\r\n              onClick={(evt) => {\r\n                evt.stopPropagation();\r\n                // console.log(evt.target);\r\n                // console.log(evt.target);\r\n                const now = new Date();\r\n                const eventDate = new Date(EventData.eventDate);\r\n                if (\r\n                  status == login_status.host &&\r\n                  (now.getMonth() !== eventDate.getMonth() ||\r\n                    now.getDate() !== eventDate.getDate() ||\r\n                    now.getHours() > 22)\r\n                ) {\r\n                  //TODO create a better method\r\n                  alert('不能編輯了唷已超過時間');\r\n                } else {\r\n                  setConfirmSubmit(true);\r\n                }\r\n\r\n                if (confirmSubmit == true) {\r\n                  const result = request.upDatePaid(EventData, participants);\r\n                  if (result) {\r\n                    setSuccess(true);\r\n                  }\r\n                }\r\n              }}\r\n            >\r\n              {confirmSubmit ? 'Confirm' : 'Submit'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    case page_status.wrong:\r\n      return <div>You may enter the wrong Passcode or HostName</div>;\r\n    default:\r\n      return <div>Please Wait</div>;\r\n  }\r\n}\r\n// -----------------Participants Card---------------------------\r\nfunction Participant({\r\n  participantId,\r\n  participantName,\r\n  eventId,\r\n  isAdmin,\r\n  index,\r\n  paid,\r\n  eventName,\r\n  setPaid,\r\n}: participant) {\r\n  return (\r\n    <div className={`List__member ${index % 2 === 0 ? 'darkgrey' : 'grey'}`}>\r\n      <h2>{participantName}</h2>\r\n      {paid ? (\r\n        <div>\r\n          <input\r\n            type='checkbox'\r\n            checked\r\n            onChange={() => {\r\n              setPaid(index);\r\n            }}\r\n          ></input>\r\n          <label>Paid</label>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <input\r\n            type='checkbox'\r\n            onChange={() => {\r\n              setPaid(index);\r\n            }}\r\n          ></input>\r\n          <label>Unpaid</label>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default HostView;\r\n","import {useContext, useEffect, useState} from 'react';\r\nimport {StatusContext} from '../controller/contexts/statusContext';\r\nimport {request} from '../controller/request';\r\nimport {IEvent} from '../models/models';\r\nimport {Link} from 'react-router-dom';\r\nimport * as uuid from 'uuid';\r\n\r\ninterface IAdminEvent extends IEvent {\r\n  index: number;\r\n}\r\n\r\nfunction Event({\r\n  week,\r\n  eventId,\r\n  index,\r\n  eventName,\r\n  hostName,\r\n  passCode,\r\n  participantNumber,\r\n}: IAdminEvent) {\r\n  return (\r\n    <tr className={`Admin__event ${index % 2 === 0 ? 'darkgrey' : 'grey'}`}>\r\n      <td className='week'>\r\n        <Link to={`/host/${hostName}/${passCode}`}>{week}</Link>\r\n      </td>\r\n      <td className='topic'>\r\n        <Link to={`/host/${hostName}/${passCode}`}>{eventName}</Link>\r\n      </td>\r\n      <td className='people'>\r\n        <Link to={`/host/${hostName}/${passCode}`}>{participantNumber}</Link>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction AdminView() {\r\n  const {status, userName, setNewStatus, setUserName} = useContext(\r\n    StatusContext\r\n  );\r\n  const [eventList, setEventList] = useState<Array<IEvent> | []>([]);\r\n  useEffect(() => {\r\n    async function getEventList() {\r\n      const result = await request.adminGetAllEvent();\r\n      const eventList = result.data;\r\n      if (result.status == 200) {\r\n        setEventList(eventList);\r\n      } else {\r\n        console.log(result);\r\n      }\r\n    }\r\n\r\n    getEventList();\r\n  }, []);\r\n  const eventListView = eventList\r\n    .sort((a: IEvent, b: IEvent) => {\r\n      return b.week - a.week;\r\n    })\r\n    .map((event: IEvent, index: number) => {\r\n      return (\r\n        <Event\r\n          key={uuid.v4()}\r\n          passCode={event.passCode}\r\n          eventDate={event.eventDate}\r\n          hostName={event.hostName}\r\n          index={index}\r\n          eventId={event.eventId}\r\n          week={event.week}\r\n          eventName={event.eventName}\r\n          participantNumber={event.participantNumber}\r\n        />\r\n      );\r\n    });\r\n  return (\r\n    <div className='Admin'>\r\n      <h1>Welcome {userName} !</h1>\r\n\r\n      <div className='Admin__container'>\r\n        <div className='Admin__info'>\r\n          <p>Total Events : {eventList.length} </p>\r\n          <p>Total Participants :</p>\r\n        </div>\r\n        <table className='Admin__EventList'>\r\n          <tbody>\r\n            <tr className='Admin__event'>\r\n              <th className='week'>week</th>\r\n              <th className='topic'>Topic</th>\r\n              <th className='people'>People </th>\r\n            </tr>\r\n            {eventListView}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className='Admin__buttons'>\r\n        {/* <button className='text'>Generate text</button> */}\r\n        <button\r\n        // ref={confirmRef}\r\n        >\r\n          Return\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminView;\r\n","import {Component, useState, useContext} from 'react';\nimport {Switch, BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport Landing from './components/Landing';\nimport HostView from './components/HostView';\nimport AdminView from './components/AdminView';\nimport {IEvent, login_status} from './models/models';\nimport {StatusContext} from './controller/contexts/statusContext';\nimport {HostProvider} from './controller/contexts/hostContext';\n\n// import dotenv from 'dotenv';\n// dotenv.config();\n\nfunction App() {\n  console.log(process.env);\n  // const {status, setNewStatus} = useContext(StatusContext);\n  // const eventIni: IEvent = {\n  //   eventId: 0,\n  //   eventName: '',\n  //   hostName: '',\n  //   passCode: '',\n  //   eventDate: '',\n  //   participantNumber: 0,\n  //   participants: [],\n  // };\n  // const [eventData, setEventData] = useState<IEvent>(eventIni);\n  // const [logged, setLogged] = useState<login_status>(login_status.default);\n  // function RenderLogin(logged: login_status) {\n  //   switch (status) {\n  //     case 'host':\n  //       return <HostView eventData={eventData} setLogged={setLogged} />;\n  //     case 'admin':\n  //       return <AdminView adminName={'Darren'} />;\n  //     default:\n  //       return (\n  //         <Landing\n  //           setEventData={setEventData}\n  //           setLogged={setLogged}\n  //           logged={logged}\n  //         />\n  //       );\n  //   }\n  // }\n  return (\n    <Router>\n      <div className='App'>\n        <Switch>\n          <HostProvider>\n            <Route exact path='/'>\n              <Landing />\n            </Route>\n            <Route path='/host/:HostName/:PassCode'>\n              <HostView />\n            </Route>\n            <Route exact path='/admin'>\n              <AdminView />\n            </Route>\n          </HostProvider>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {login_status} from './models/models';\n\nimport {\n  StatusContext,\n  StatusProvider,\n} from './controller/contexts/statusContext';\n\nstartApp();\nfunction startApp() {\n  ReactDOM.render(\n    <React.StrictMode>\n      <StatusProvider>\n        <App />\n      </StatusProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}